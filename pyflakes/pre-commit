#!/usr/bin/env python
from os.path import dirname, join
import sys
import json
import _ast

sys.path = [join(dirname(__file__), 'lib')] + sys.path

from pyflakes import checker

data = json.loads(sys.stdin.read())
files = data['files']
config = data['config']

# This will hold our output
out = {}


def check(codeString, filename):
    """
    Checks the filename for Pyflakes messages.

    Returns a list of messages if Pyflakes detects anything.
    """
    try:
        tree = compile(codeString, filename, "exec", _ast.PyCF_ONLY_AST)
    except SyntaxError as value:
        msg = value.args[0]

        (lineno, offset, text) = value.lineno, value.offset, value.text

        if text is None:
            print >> sys.stderr, "%s: problem decoding source" % (filename, )
        else:
            line = text.splitlines()[-1]

            if offset is not None:
                offset = offset - (len(text) - len(line))

            se = SyntaxError(msg)
            se.lineno = lineno

            raise se
    else:
        w = checker.Checker(tree, filename)
        w.messages.sort(lambda a, b: cmp(a.lineno, b.lineno))
        return w.messages


for f in files:
    if f['type'] == 'deleted':
        # File is deleted
        continue

    # Add a new key to our dictionary based on the filename
    out[f['name']] = []

    filename = f['filename']
    if not filename.endswith('.py'):
        # Not Python, we don't care
        continue

    try:
        messages = check(file(filename, 'U').read(), filename)
        for warning in messages:
            m = warning.message % warning.message_args
            out[f['name']].append((warning.lineno, 'warn', m))
    except SyntaxError as se:
        out[f['name']].append((se.lineno, 'stop', se.message))
    except IOError:
        out[f['name']] = ('stop', 'Could not open the file')

# Finally, write to stdout the JSON encoded output
sys.stdout.write(json.dumps(out, indent=4))

# Tell Git that the plugin ran successfully (according to design)
sys.exit(0)
