#!/usr/bin/env python
from os.path import splitext
import json
import sys
import re

ALL = '*'

SMELLS = {
    ALL: [
        (re.compile(r':(w|wq|q|x)$', re.M), 'vim command'),
        (re.compile(r'^(>>>>>>>|<<<<<<<)'), 'merge marker')],
    '.py': [
        (re.compile(r'^\s*print\b'), 'print statement'),
        (re.compile(r'\bi?pdb\.set_trace\(\)'), 'pdb.set_trace()')],
    '.js': [
        (re.compile(r'^\s*debugger;'), 'javascript debugger'),
        (re.compile(r'^\s*console\.'), 'javascript console usage')]}

REPORTING_LIMIT = 50
REPORTING_LIMIT_WARNING = 'Lots of woops here (over {0}) ignoring'.format(
    REPORTING_LIMIT)

data = json.loads(sys.stdin.read())
files = data['files']
config = data['config']
check_windows_newlines = config.get('check_windows_newlines', 'yes') == 'yes'

out = {}


def has_windows_newline(filename):
    """
    Detect if a file contains a Windows newline.
    """
    with open(filename) as fh:
        if '\0' in fh.read():
            # This is binary, skip it
            return False

        # Back to the beginning
        fh.seek(0)

        for line in fh.readlines():
            if line.endswith('\r') or line.endswith('\r\n'):
                return True

    return False

for f in files:
    if f['type'] == 'deleted':
        # File is deleted
        continue

    # Add a new key to our dictionary based on the filename
    out[f['name']] = []

    filename, extension = splitext(f['filename'])

    checks = SMELLS[ALL]
    try:
        checks = checks + SMELLS[extension]
    except KeyError:
        pass

    if check_windows_newlines and has_windows_newline(f['filename']):
        out[f['name']].append(('warn', 'Contains Windows newlines'))

    # You can read the settings like this
    for line, kind, content in f['diff']:
        if not kind == '+':
            continue

        for check in checks:
            rex, message = check
            if rex.search(content):
                out[f['name']].append((line, 'warn', message))

    for filename in out.keys():
        messages = out[filename]
        if len(messages) > REPORTING_LIMIT:
            del messages[:]
            messages.append(('warn', REPORTING_LIMIT_WARNING))


# Finally, write to stdout the JSON encoded output
sys.stdout.write(json.dumps(out, indent=4))

# Tell Git that the plugin ran successfully (according to design)
sys.exit(0)
