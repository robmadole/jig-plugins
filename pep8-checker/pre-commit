#!/usr/bin/env python
import json
import re
import sys
from pprint import PrettyPrinter

import pep8

pp = PrettyPrinter().pprint

data = json.loads(sys.stdin.read())
files = data['files']
config = data['config']

# Settings
default_type = config.get('default_type', 'warn')
report_E501 = True if config.get('report_e501', 'yes') == 'yes' else False

# Initialize the pep8 options, this is needed to make everything work
options, args = pep8.process_options(['pep8'])

message_breaker = re.compile(r'''
    (?P<filename>.*):
    (?P<line>[0-9]+):
    (?P<column>[0-9]+):
    \ (?P<message>.+)''', re.VERBOSE)

out = {}


class JigReporter(pep8.BaseReport):

    """
    Custom pep8 reporter to collect the errors in a compatible format.

    """

    def __init__(self, *args, **kwargs):
        super(JigReporter, self).__init__(*args, **kwargs)

        self.collected = []

    def error(self, line_number, offset, text, check):
        if 'E501' in text and not report_E501:
            return
        self.collected.append(
            [line_number, default_type, '{0}\n     - {1}'.format(
            self.lines[int(line_number) - 1].strip(), text)])

for f in files:
    if f['type'] == 'deleted':
        # File is deleted
        continue

    if not f['name'].endswith('.py'):
        # Not a Python file
        continue

    pep8style = pep8.StyleGuide(parse_argv=False, config_file=False)
    options = pep8style.options
    report = JigReporter(options)

    checker = pep8.Checker(f['filename'], options=options, report=report)
    checker.check_all()

    out[f['name']] = report.collected

# Finally, write to stdout the JSON encoded output
sys.stdout.write(json.dumps(out, indent=4))

# Tell Git that the plugin ran successfully (according to design)
sys.exit(0)
