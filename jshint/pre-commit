#!/usr/bin/env node
var fs                 = require('fs'),
    util               = require('util'),
    encoding           = 'utf-8',
    JSHINT             = require('./jshint.js').JSHINT,
    data               = '',
    processDataOutputJigFormat,
    PROBABLY_MINIMIZED = 500;

// Polyfill
if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}

// Read the data from standard input
process.stdin.resume();

process.stdin.setEncoding(encoding);

process.stdin.on('data', function (chunk) {
    data += chunk;
});

process.stdin.on('end', function () {
    data = JSON.parse(data);

    processDataOutputJigFormat(data);
});

// Process the contents of stdin
processDataOutputJigFormat = function (data) {
    var messages = {};

    data.files.forEach(function (file) {
        var filename = file.filename,
            jshintData,
            contents,
            thisFileErrors;

        if (!file.name.endsWith('.js')) {
            // Not a JavaScript file.
            return;
        }

        if (file.type == 'deleted') {
            // Don't continue, this file was deleted.
            return;
        }

        contents = fs.readFileSync(filename, encoding);

        messages[file.name] = thisFileErrors = [];

        // Does this appear to be minimized?
        if (contents.length / (contents.split('\n').length || 1) > PROBABLY_MINIMIZED) {
            thisFileErrors.push(['Skipping file, it appears to be minified']);
            return;
        }

        JSHINT(contents);


        jshintData = JSHINT.data();

        if (!jshintData.errors && !jshintData.unused) {
            // There is nothing wrong with this one.
            return;
        }

        (jshintData.errors || []).forEach(function (error) {
            var reason,
                line;

            if (!error) {
                return;
            }

            try {
                reason = error.evidence + '\n    ' + error.reason + ' @ chr ' + error.character;
                line = error.line;
            } catch (e) {
                thisFileErrors.push(e.toString())
                return;
            }

            thisFileErrors.push([line, 'w', reason]);
        });

        (jshintData.unused || []).forEach(function (unused) {
            thisFileErrors.push([unused.line, 'w', 'Unused variable: ' + unused.name]);
        });
    });

    console.log(JSON.stringify(messages));

    process.exit(0);
};
